#!/bin/bash

# OTEL Configuration Validator Script for Logz.io Agent Manifest Testing
# This script validates the OpenTelemetry collector configuration files
# generated by the Logz.io agent for localhost subtypes.

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Default paths - can be overridden via command line arguments
CONFIG_DIR=""
OS_TYPE=""
VALIDATION_REPORT=""

# Print usage information
print_usage() {
    echo "Usage: $0 --config-dir=<config_dir> --os=<linux|mac|windows> [--report=<report_file>]"
    echo ""
    echo "Options:"
    echo "  --config-dir=<config_dir>    Directory containing OTEL configuration files"
    echo "  --os=<os_type>              OS type (linux, mac, or windows)"
    echo "  --report=<report_file>       Output file for validation report (optional)"
    echo ""
}

# Parse command-line arguments
parse_args() {
    for arg in "$@"; do
        case $arg in
            --config-dir=*)
                CONFIG_DIR="${arg#*=}"
                ;;
            --os=*)
                OS_TYPE="${arg#*=}"
                ;;
            --report=*)
                VALIDATION_REPORT="${arg#*=}"
                ;;
            --help)
                print_usage
                exit 0
                ;;
            *)
                echo "Error: Unknown argument: $arg"
                print_usage
                exit 1
                ;;
        esac
    done

    # Validate required arguments
    if [[ -z "$CONFIG_DIR" ]]; then
        echo "Error: --config-dir is required"
        print_usage
        exit 1
    fi

    if [[ -z "$OS_TYPE" ]]; then
        echo "Error: --os is required"
        print_usage
        exit 1
    fi

    if [[ ! "$OS_TYPE" =~ ^(linux|mac|windows)$ ]]; then
        echo "Error: --os must be one of: linux, mac, windows"
        print_usage
        exit 1
    fi

    # Set default report file if not specified
    if [[ -z "$VALIDATION_REPORT" ]]; then
        VALIDATION_REPORT="$SCRIPT_DIR/otel_validation_${OS_TYPE}.txt"
    fi
}

# Check for required utilities
check_dependencies() {
    local missing_deps=()

    if ! command -v jq &>/dev/null; then
        missing_deps+=("jq")
    fi

    if ! command -v yq &>/dev/null; then
        missing_deps+=("yq")
    fi

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "Error: Missing required dependencies: ${missing_deps[*]}"
        echo "Please install them and try again."
        exit 1
    fi
}

# Check if OTEL config file exists
check_otel_config() {
    local config_file="$CONFIG_DIR/otel_config.yaml"
    
    if [[ ! -f "$config_file" ]]; then
        echo "Error: OTEL config file not found: $config_file"
        return 1
    fi
    
    echo "Found OTEL config file: $config_file"
    return 0
}

# Check if log pipeline exists and is valid
check_logs_pipeline() {
    local pipeline_file="$CONFIG_DIR/logs_pipeline.yaml"
    
    if [[ ! -f "$pipeline_file" ]]; then
        echo "Logs Pipeline: Not Found"
        return 1
    fi
    
    # Check if the pipeline file contains valid receivers and exporters
    local has_receivers=$(yq '.receivers' "$pipeline_file" | grep -v "null" | wc -l)
    local has_exporters=$(yq '.exporters' "$pipeline_file" | grep -v "null" | wc -l)
    
    if [[ "$has_receivers" -gt 0 && "$has_exporters" -gt 0 ]]; then
        echo "Logs Pipeline: Valid"
        return 0
    else
        echo "Logs Pipeline: Invalid (Missing receivers or exporters)"
        return 1
    fi
}

# Check if metrics pipeline exists and is valid
check_metrics_pipeline() {
    local pipeline_file="$CONFIG_DIR/metrics_pipeline.yaml"
    
    if [[ ! -f "$pipeline_file" ]]; then
        echo "Metrics Pipeline: Not Found"
        return 1
    fi
    
    # Check if the pipeline file contains valid receivers and exporters
    local has_receivers=$(yq '.receivers' "$pipeline_file" | grep -v "null" | wc -l)
    local has_exporters=$(yq '.exporters' "$pipeline_file" | grep -v "null" | wc -l)
    
    if [[ "$has_receivers" -gt 0 && "$has_exporters" -gt 0 ]]; then
        echo "Metrics Pipeline: Valid"
        return 0
    else
        echo "Metrics Pipeline: Invalid (Missing receivers or exporters)"
        return 1
    fi
}

# Check if the service definition file exists and is valid
check_service_file() {
    local service_file=""
    local service_status="Not Found"
    
    case "$OS_TYPE" in
        linux)
            service_file="$CONFIG_DIR/logzio-otel-collector.service"
            if [[ -f "$service_file" ]]; then
                if grep -q "ExecStart" "$service_file"; then
                    service_status="Valid"
                else
                    service_status="Invalid (Missing ExecStart)"
                fi
            fi
            ;;
        mac)
            service_file="$CONFIG_DIR/io.logz.collector.plist"
            if [[ -f "$service_file" ]]; then
                if grep -q "<key>ProgramArguments</key>" "$service_file"; then
                    service_status="Valid"
                else
                    service_status="Invalid (Missing ProgramArguments)"
                fi
            fi
            ;;
        windows)
            # Windows service validation is more complex and would require PowerShell
            service_status="Not Validated (Requires PowerShell)"
            ;;
    esac
    
    echo "Service Definition: $service_status"
    return 0
}

# Main validation function
validate_otel_config() {
    echo "=== Validating OTEL Configuration for $OS_TYPE ==="
    echo "Configuration Directory: $CONFIG_DIR"
    echo ""
    
    # Check if configuration directory exists
    if [[ ! -d "$CONFIG_DIR" ]]; then
        echo "Error: Configuration directory not found: $CONFIG_DIR"
        return 1
    fi
    
    # Initialize validation status
    local validation_status="PASSED"
    local validation_output=""
    
    # Append to validation output
    append_output() {
        validation_output+="$1"$'\n'
    }
    
    # Check OTEL config
    append_output "Checking OTEL Configuration:"
    if check_otel_config; then
        append_output "  - OTEL Config: Found"
    else
        append_output "  - OTEL Config: Not Found (FAILED)"
        validation_status="FAILED"
    fi
    
    # Check logs pipeline
    append_output "Checking Logs Pipeline:"
    local logs_result=""
    if check_logs_pipeline; then
        append_output "  - Logs Pipeline: Valid"
        logs_result="PASSED"
    else
        append_output "  - Logs Pipeline: Invalid or Not Found"
        logs_result="SKIPPED"
    fi
    
    # Check metrics pipeline
    append_output "Checking Metrics Pipeline:"
    local metrics_result=""
    if check_metrics_pipeline; then
        append_output "  - Metrics Pipeline: Valid"
        metrics_result="PASSED"
    else
        append_output "  - Metrics Pipeline: Invalid or Not Found"
        metrics_result="SKIPPED"
    fi
    
    # Check service file
    append_output "Checking Service Definition:"
    local service_result=$(check_service_file)
    append_output "  - $service_result"
    
    # Generate validation report
    {
        echo "=== OTEL Configuration Validation Report ==="
        echo "Date: $(date)"
        echo "OS Type: $OS_TYPE"
        echo "Configuration Directory: $CONFIG_DIR"
        echo ""
        echo "$validation_output"
        echo ""
        echo "Validation Status: $validation_status"
        echo ""
        echo "Logs Configuration: $logs_result"
        echo "Metrics Configuration: $metrics_result"
        echo ""
        echo "Note: This validation checks for the existence and basic structure"
        echo "      of configuration files but does not verify full functionality."
    } > "$VALIDATION_REPORT"
    
    echo ""
    echo "Validation report generated: $VALIDATION_REPORT"
    
    if [[ "$validation_status" == "FAILED" ]]; then
        return 1
    else
        return 0
    fi
}

# Main function
main() {
    parse_args "$@"
    check_dependencies
    validate_otel_config
}

main "$@"