{
    "commands": [
        {
            "description": "Create variables",
            "run": [
                "helm_sets=\"\";",
                "general_params=$(jq -r \".subtype.datasources[0].params\" $APP_JSON);",
                "is_logs_option_selected=true;",
                "logs_params=$(jq -r \".subtype.datasources[0].telemetries[0].params\" $APP_JSON);",
                "is_metrics_option_selected=true;",
                "metrics_params=$(jq -r \".subtype.datasources[0].telemetries[1].params\" $APP_JSON);",
                "is_traces_option_selected=true;",
                "traces_params=$(jq -r \".subtype.datasources[0].telemetries[2].params\" $APP_JSON);"
            ]
        },
        {
            "description": "Is logs option selected?",
            "run": [
                "if [ \"$logs_params\" = [] ]; then",
                    "is_logs_option_selected=false;",
                    "echo \"Logs option was not selected\";",
                "else",
                    "echo \"Logs option was selected\";",
                "fi;"
            ]
        },
        {
            "description": "Is metrics option selected?",
            "run": [
                "if [ \"$metrics_params\" = [] ]; then",
                    "is_metrics_option_selected=false;",
                    "echo \"Metrics option was not selected\";",
                "else",
                    "echo \"Metrics option was selected\";",
                "fi;"
            ]
        },
        {
            "description": "Is traces option selected?",
            "run": [
                "if [ \"$traces_params\" = [] ]; then",
                    "is_traces_option_selected=false;",
                    "echo \"Traces option was not selected\";",
                "else",
                    "echo \"Traces option was selected\";",
                "fi;"
            ]
        },
        {
            "description": "Append helm_sets string with tolerations Helm sets",
            "run": [
                "echo \"Getting isTaint...\";",
                "is_taint_param=$(find_param \"datasources\" \"$general_params\" \"isTaint\");",
                "value=$(echo \"$is_taint_param\" | jq -r \".value\");",
                "if $value; then",
                    "items=$(kubectl get nodes -o json | jq -r \".items\");",
                    "tolerations_sets=\"\";",
                    "index=0;",
                    "echo \"Creating tolerations Helm sets...\";",
                    "while read -r taint; do",
                        "key=$(echo $taint | jq -r \".key\");",
                        "value=$(echo $taint | jq -r \".value\");",
                        "effect=$(echo $taint | jq -r \".effect\");",
                        "if $is_logs_option_selected; then",
                            "tolerations_sets+=\" --set 'secrets.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'secrets.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'secrets.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'secrets.tolerations[$index].effect=$effect'\";",
                            "tolerations_sets+=\" --set 'logzio-fluentd.daemonset.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'logzio-fluentd.daemonset.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'logzio-fluentd.daemonset.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'logzio-fluentd.daemonset.tolerations[$index].effect=$effect'\";",
                        "fi;",
                        "if $is_metrics_option_selected || $is_traces_option_selected; then",
                            "tolerations_sets+=\" --set 'prometheus-pushgateway.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'prometheus-pushgateway.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'prometheus-pushgateway.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'prometheus-pushgateway.tolerations[$index].effect=$effect'\";",
                            "tolerations_sets+=\" --set 'prometheus-node-exporter.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'prometheus-node-exporter.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'prometheus-node-exporter.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'prometheus-node-exporter.tolerations[$index].effect=$effect'\";",
                            "tolerations_sets+=\" --set 'kube-state-metrics.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'kube-state-metrics.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'kube-state-metrics.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'kube-state-metrics.tolerations[$index].effect=$effect'\";",
                            "tolerations_sets+=\" --set 'logzio-k8s-telemetry.tolerations[$index].key=$key'\";",
                            "tolerations_sets+=\" --set 'logzio-k8s-telemetry.tolerations[$index].value=$value'\";",
                            "tolerations_sets+=\" --set 'logzio-k8s-telemetry.tolerations[$index].operator=Equal'\";",
                            "tolerations_sets+=\" --set 'logzio-k8s-telemetry.tolerations[$index].effect=$effect'\";",
                        "fi;",
                        "let index+=1;",
                    "done < <(echo \"$items\" | jq -c \".[].spec.taints[]\");",
                    "helm_sets+=\"$tolerations_sets\";",
                "fi;"
            ]
        },
        {
            "description": "Run logs commands",
            "run": [
                "if $is_logs_option_selected; then",
                    "echo \"Getting logs commands...\";",
                    "logs=$(curl -LSs $manifest/telemetry/logs/linux.json | jq -r \".commands\");",
                    "echo \"Running logs commands...\";",
                    "run_commands \"$logs\";",
                "fi;"
            ]
        },
        {
            "description": "Run metrics commands",
            "run": [
                "if $is_metrics_option_selected; then",
                    "echo \"Getting metrics commands...\";",
                    "metrics=$(curl -LSs $manifest/telemetry/metrics/linux.json | jq -r \".commands\");",
                    "echo \"Running metrics commands...\";",
                    "run_commands \"$metrics\";",
                "fi;"
            ]
        },
        {
            "description": "Run traces commands",
            "run": [
                "if $is_traces_option_selected; then",
                    "echo \"Getting traces commands...\";",
                    "traces=$(curl -LSs $manifest/telemetry/traces/mac.json | jq -r \".commands\");",
                    "echo \"Running traces commands...\";",
                    "run_commands \"$traces\";",
                "fi;"
            ]
        },
        {
            "description": "Run Helm install",
            "run": [
                "echo \"Running Helm install...\";",
                "helm install $helm_sets logzio-otel-k8s-metrics logzio-helm/logzio-otel-k8s-metrics;",
                "echo \"The Helm chart was installed successfully\";"
            ]
        },
        {
            "description": "Remove temp files",
            "run": [
                "echo \"Deleting temp files...\";",
                "rm -f sources.xml;",
                "rm -f filters.xml;"
            ]
        }
    ]
}