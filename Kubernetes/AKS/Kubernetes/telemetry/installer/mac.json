{
    "commands": [
        {
            "description": "Create variables",
            "run": [
                "helm_sets=\"\";",
                "general_params=\"\";",
                "is_logs_option_selected=false;",
                "logs_params=\"\";",
                "is_metrics_option_selected=false;",
                "metrics_params=\"\";",
                "is_traces_option_selected=false;",
                "traces_params=\"\";"
            ]
        },
        {
            "description": "Get general params",
            "run": [
                "echo \"Getting general params...\";",
                "is_params_exist=$(echo \"$APP_JSON\" | jq -r \".configuration.subtypes[0].datasources[0]\" | jq -r 'has(\"params\")');",
                "if $is_params_exist; then",
                    "general_params=$(echo \"$APP_JSON\" | jq -r \".configuration.subtypes[0].datasources[0].params\");",
                "fi;"
            ]
        },
        {
            "description": "Which products were selected?",
            "run": [
                "echo \"Getting which products were selected...\";",
                "while read -r telemetry; do",
                    "type=$(echo \"$telemetry\" | jq -r \".type\");",
                    "if [ \"$type\" = \"LOG_ANALYTICS\" ]; then",
                        "is_logs_option_selected=true;",
                        "is_params_exist=$(echo \"$telemetry\" | jq -r 'has(\"params\")');",
                        "if $is_params_exist; then",
                            "logs_params=$(echo \"$telemetry\" | jq -r \".params\");",
                        "fi;",
                    "elif [ \"$type\" = \"METRICS\" ]; then",
                        "is_metrics_option_selected=true;",
                        "is_params_exist=$(echo \"$telemetry\" | jq -r 'has(\"params\")');",
                        "if $is_params_exist; then",
                            "metrics_params=$(echo \"$telemetry\" | jq -r \".params\");",
                        "fi;",
                    "elif [ \"$type\" = \"TRACING\" ]; then",
                        "is_traces_option_selected=true;",
                        "is_params_exist=$(echo \"$telemetry\" | jq -r 'has(\"params\")');",
                        "if $is_params_exist; then",
                            "traces_params=$(echo \"$telemetry\" | jq -r \".params\");",
                        "fi;",
                    "fi;",
                "done < <(echo \"$APP_JSON\" | jq -c \".configuration.subtypes[0].datasources[0].telemetries[]\");"
            ]
        },
        {
            "description": "Append helm_sets string with tolerations Helm sets",
            "run": [
                "echo \"Getting is taint...\";",
                "is_taint_param=$(find_param \"datasources\" \"$general_params\" \"isTaint\");",
                "if [ \"$is_taint_param\" = \"\" ]; then",
                    "echo \"There are no tains\";",
                "else",
                    "items=$(kubectl get nodes -o json | jq -r \".items\");",
                    "tolerations_sets=\"\";",
                    "index=0;",
                    "echo \"Creating tolerations Helm sets...\";",
                    "while read -r taint; do",
                        "echo \"$taint\";",
                        "key=$(echo \"$taint\" | jq -r \".key\");",
                        "operator=\"Exists\";",
                        "effect=$(echo \"$taint\" | jq -r \".effect\");",
                        "if $(echo \"$taint\" | jq -r 'has(\"value\")'); then",
                            "value=$(echo \"$taint\" | jq -r \".value\");",
                            "operator=\"Equal\";",
                            "if $is_logs_option_selected; then",
                                "tolerations_sets+=\" --set-string logzio-fluentd.daemonset.tolerations[$index].value=$value\";",
                                "tolerations_sets+=\" --set-string logzio-fluentd.windowsDaemonset.tolerations[$index].value=$value\";",
                            "fi;",
                            "if $is_metrics_option_selected || $is_traces_option_selected; then",
                                "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-pushgateway.tolerations[$index].value=$value\";",
                                "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-node-exporter.tolerations[$index].value=$value\";",
                                "tolerations_sets+=\" --set-string logzio-k8s-telemetry.kube-state-metrics.tolerations[$index].value=$value\";",
                                "tolerations_sets+=\" --set-string logzio-k8s-telemetry.tolerations[$index].value=$value\";",
                            "fi;",
                        "fi;",
                        "if $is_logs_option_selected; then",
                            "tolerations_sets+=\" --set-string logzio-fluentd.daemonset.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-fluentd.daemonset.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-fluentd.daemonset.tolerations[$index].effect=$effect\";",
                            "tolerations_sets+=\" --set-string logzio-fluentd.windowsDaemonset.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-fluentd.windowsDaemonset.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-fluentd.windowsDaemonset.tolerations[$index].effect=$effect\";",
                        "fi;",
                        "if $is_metrics_option_selected || $is_traces_option_selected; then",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-pushgateway.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-pushgateway.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-pushgateway.tolerations[$index].effect=$effect\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-node-exporter.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-node-exporter.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.prometheus-node-exporter.tolerations[$index].effect=$effect\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.kube-state-metrics.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.kube-state-metrics.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.kube-state-metrics.tolerations[$index].effect=$effect\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.tolerations[$index].key=$key\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.tolerations[$index].operator=$operator\";",
                            "tolerations_sets+=\" --set-string logzio-k8s-telemetry.tolerations[$index].effect=$effect\";",
                        "fi;",
                        "let index+=1;",
                    "done < <(echo \"$items\" | jq -c '.[] | .spec | select(.taints!=null) | .taints[]');",
                    "helm_sets+=\"$tolerations_sets\";",
                "fi;"
            ]
        },
        {
            "description": "Append helm_sets string with enable metrics or traces Helm sets",
            "run": [
                "if $is_metrics_option_selected || $is_traces_option_selected; then",
                    "echo \"Creating enable metrics or traces Helm set...\";",
                    "helm_set=\" --set metricsOrTraces.enabled=true\";",
                    "helm_sets+=\"$helm_set\";",
                "fi;"
            ]
        },
        {
            "description": "Append helm_sets string with environment tag Helm set",
            "run": [
                "if $is_metrics_option_selected || $is_traces_option_selected; then",
                    "echo \"Getting environment tag...\";",
                    "env_tag=$(echo \"$APP_JSON\" | jq -r \".id\");",
                    "echo \"Creating environment tag Helm set...\";",
                    "helm_set=\" --set logzio-k8s-telemetry.secrets.p8s_logzio_name=$env_tag\";",
                    "helm_sets+=\"$helm_set\";",
                "fi;"
            ]
        },
        {
            "description": "Run logs commands",
            "run": [
                "if $is_logs_option_selected; then",
                    "echo \"Getting logs commands...\";",
                    "logs=$(curl -LSs $manifest/telemetry/logs/mac.json | jq -r \".commands\");",
                    "echo \"Running logs commands...\";",
                    "run_commands \"$logs\";",
                "fi;"
            ]
        },
        {
            "description": "Run metrics commands",
            "run": [
                "if $is_metrics_option_selected; then",
                    "echo \"Getting metrics commands...\";",
                    "metrics=$(curl -LSs $manifest/telemetry/metrics/mac.json | jq -r \".commands\");",
                    "echo \"Running metrics commands...\";",
                    "run_commands \"$metrics\";",
                "fi;"
            ]
        },
        {
            "description": "Run traces commands",
            "run": [
                "if $is_traces_option_selected; then",
                    "echo \"Getting traces commands...\";",
                    "traces=$(curl -LSs $manifest/telemetry/traces/mac.json | jq -r \".commands\");",
                    "echo \"Running traces commands...\";",
                    "run_commands \"$traces\";",
                "fi;"
            ]
        },
        {
            "description": "Run Helm install",
            "run": [
                "echo \"Running Helm install...\";",
                "helm install -n monitoring $helm_sets --create-namespace logzio-monitoring logzio-helm/logzio-monitoring;",
                "echo \"The Helm chart was installed successfully\";"
            ]
        },
        {
            "description": "Remove temp files",
            "run": [
                "echo \"Deleting temp files...\";",
                "rm -f sources.conf;",
                "rm -f filters.conf;"
            ]
        }
    ]
}